name: Build Test Package

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-test-package:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.6.1
          run_install: false
        # pnpm must be available before enabling pnpm caching in setup-node

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install VS Code test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnspr4 \
            libnss3 \
            libatk-bridge2.0-0 \
            libatk1.0-0 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libxrandr2 \
            libxkbcommon0 \
            libgbm1 \
            libpango-1.0-0 \
            libasound2

      - name: Run extension tests
        run: xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' pnpm --dir packages/extension test

      - name: Run relay tests
        run: pnpm --dir packages/relay test

      - name: Build relay package
        run: pnpm --dir packages/relay build

      - name: Compile extension
        run: pnpm --dir packages/extension compile

      - name: Package VSIX
        run: pnpm --dir packages/extension package-extension

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-as-mcp-server-vsix
          path: packages/extension/*.vsix

      - name: Determine extension version
        id: extension_version
        run: |
          VERSION=$(node -p "require('./packages/extension/package.json').version")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Publish GitHub release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.actor != 'github-actions[bot]'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.extension_version.outputs.version }}
          name: VSCode as MCP Server v${{ steps.extension_version.outputs.version }}
          files: packages/extension/*.vsix
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Bump extension patch version
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.actor != 'github-actions[bot]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          CURRENT_VERSION=$(node -p "require('./packages/extension/package.json').version")
          node <<'NODE'
          const fs = require('fs');
          const path = './packages/extension/package.json';
          const pkg = JSON.parse(fs.readFileSync(path, 'utf8'));
          const parts = pkg.version.split('.').map(Number);
          if (parts.length !== 3 || parts.some((n) => Number.isNaN(n))) {
            throw new Error(`Unexpected semver format: ${pkg.version}`);
          }
          parts[2] += 1;
          pkg.version = parts.join('.');
          fs.writeFileSync(path, JSON.stringify(pkg, null, 2) + '\n');
          NODE
          NEXT_VERSION=$(node -p "require('./packages/extension/package.json').version")
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add packages/extension/package.json
          git commit -m "chore: bump extension version to ${NEXT_VERSION} [skip release]"
          git push
